---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: inputs.environmentconfigs.fn.crossplane.io
spec:
  group: environmentconfigs.fn.crossplane.io
  names:
    categories:
    - crossplane
    kind: Input
    listKind: InputList
    plural: inputs
    singular: input
  scope: Namespaced
  versions:
  - name: v1beta1
    schema:
      openAPIV3Schema:
        description: Input can be used to provide input to this Function.
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: |-
              An InputSpec specifies the environment for rendering composed
              resources.
            properties:
              defaultData:
                additionalProperties:
                  x-kubernetes-preserve-unknown-fields: true
                description: |-
                  DefaultData statically defines the initial state of the environment.
                  It has the same schema-less structure as the data field in
                  environment configs.
                  It is overwritten by the selected environment configs.
                type: object
              environmentConfigs:
                description: |-
                  EnvironmentConfigs selects a list of `EnvironmentConfig`s. The resolved
                  resources are stored in the composite resource at
                  `spec.environmentConfigRefs` and is only updated if it is null.


                  The list of references is used to compute an in-memory environment at
                  compose time. The data of all object is merged in the order they are
                  listed, meaning the values of EnvironmentConfigs with a larger index take
                  priority over ones with smaller indices.


                  The computed environment can be accessed in a composition using
                  `FromEnvironmentFieldPath` and `CombineFromEnvironment` patches.
                items:
                  description: EnvironmentSource selects a EnvironmentConfig resource.
                  properties:
                    ref:
                      description: |-
                        Ref is a named reference to a single EnvironmentConfig.
                        Either Ref or Selector is required.
                      properties:
                        name:
                          description: The name of the object.
                          type: string
                      required:
                      - name
                      type: object
                    selector:
                      description: Selector selects EnvironmentConfig(s) via labels.
                      properties:
                        matchLabels:
                          description: MatchLabels ensures an object with matching
                            labels is selected.
                          items:
                            description: |-
                              An EnvironmentSourceSelectorLabelMatcher acts like a k8s label selector but
                              can draw the label value from a different path.
                            properties:
                              fromFieldPathPolicy:
                                default: Required
                                description: |-
                                  FromFieldPathPolicy specifies the policy for the valueFromFieldPath.
                                  The default is Required, meaning that an error will be returned if the
                                  field is not found in the composite resource.
                                  Optional means that if the field is not found in the composite resource,
                                  that label pair will just be skipped. N.B. other specified label
                                  matchers will still be used to retrieve the desired
                                  environment config, if any.
                                enum:
                                - Optional
                                - Required
                                type: string
                              key:
                                description: Key of the label to match.
                                type: string
                              type:
                                default: FromCompositeFieldPath
                                description: Type specifies where the value for a
                                  label comes from.
                                enum:
                                - FromCompositeFieldPath
                                - Value
                                type: string
                              value:
                                description: Value specifies a literal label value.
                                type: string
                              valueFromFieldPath:
                                description: ValueFromFieldPath specifies the field
                                  path to look for the label value.
                                type: string
                            required:
                            - key
                            type: object
                          type: array
                        maxMatch:
                          description: MaxMatch specifies the number of extracted
                            EnvironmentConfigs in Multiple mode, extracts all if nil.
                          format: int64
                          type: integer
                        minMatch:
                          description: MinMatch specifies the required minimum of
                            extracted EnvironmentConfigs in Multiple mode.
                          format: int64
                          type: integer
                        mode:
                          default: Single
                          description: 'Mode specifies retrieval strategy: "Single"
                            or "Multiple".'
                          enum:
                          - Single
                          - Multiple
                          type: string
                        sortByFieldPath:
                          default: metadata.name
                          description: SortByFieldPath is the path to the field based
                            on which list of EnvironmentConfigs is alphabetically
                            sorted.
                          type: string
                      type: object
                    type:
                      default: Reference
                      description: |-
                        Type specifies the way the EnvironmentConfig is selected.
                        Default is `Reference`
                      enum:
                      - Reference
                      - Selector
                      type: string
                  type: object
                type: array
              patches:
                description: |-
                  Patches is a list of environment patches that are executed once the
                  input's defaultData and environmentConfigs are merged together.
                  These patches are from the XR to the Environment only.
                items:
                  description: |-
                    EnvironmentPatch objects are applied between the composite resource and
                    the environment. Their behaviour depends on the Type selected. The default
                    Type, FromCompositeFieldPath, copies a value from the composite resource
                    to the environment, applying any defined transformers.
                  properties:
                    combine:
                      description: |-
                        Combine is the patch configuration for a CombineFromComposite,
                        CombineToComposite patch.
                      properties:
                        strategy:
                          description: |-
                            Strategy defines the strategy to use to combine the input variable values.
                            Currently only string is supported.
                          enum:
                          - string
                          type: string
                        string:
                          description: |-
                            String declares that input variables should be combined into a single
                            string, using the relevant settings for formatting purposes.
                          properties:
                            fmt:
                              description: |-
                                Format the input using a Go format string. See
                                https://golang.org/pkg/fmt/ for details.
                              type: string
                          required:
                          - fmt
                          type: object
                        variables:
                          description: |-
                            Variables are the list of variables whose values will be retrieved and
                            combined.
                          items:
                            description: |-
                              A CombineVariable defines the source of a value that is combined with
                              others to form and patch an output value. Currently, this only supports
                              retrieving values from a field path.
                            properties:
                              fromFieldPath:
                                description: |-
                                  FromFieldPath is the path of the field on the source whose value is
                                  to be used as input.
                                type: string
                            required:
                            - fromFieldPath
                            type: object
                          minItems: 1
                          type: array
                      required:
                      - strategy
                      - variables
                      type: object
                    fromFieldPath:
                      description: |-
                        FromFieldPath is the path of the field on the resource whose value is
                        to be used as input. Required when type is FromCompositeFieldPath or
                        ToCompositeFieldPath.
                      type: string
                    policy:
                      description: Policy configures the specifics of patching behaviour.
                      properties:
                        fromFieldPath:
                          description: |-
                            FromFieldPath specifies how to patch from a field path. The default is
                            'Optional', which means the patch will be a no-op if the specified
                            fromFieldPath does not exist. Use 'Required' to prevent the creation of a
                            new composed resource until the required path exists.
                          enum:
                          - Optional
                          - Required
                          type: string
                        toFieldPath:
                          description: |-
                            ToFieldPath specifies how to patch to a field path. The default is
                            'Replace', which means the patch will completely replace the target field,
                            or create it if it does not exist. Use 'MergeObjects' to recursively merge the patch
                            object with the target object, while keeping target object keys, but overwriting any array values, or use
                            'MergeObjectsAppendArrays' to recursively merge the patch object with the target object, while keeping
                            target object keys and appending any array values to target array values, or use
                            'ForceMergeObjects' to recursively merge the patch object with the target object, overwriting
                            any target object keys, including array values, or use
                            'ForceMergeObjectsAppendArrays' to recursively merge the patch object with the target object,
                            overwriting target object keys, and appending any array values to target array values.
                            'MergeObject' is deprecated, use 'MergeObjects' instead, which is functionally identical.
                            'AppendArray' is deprecated, use 'ForceMergeObjectsAppendArrays' instead, which is functionally identical.
                          enum:
                          - Replace
                          - MergeObjects
                          - MergeObjectsAppendArrays
                          - ForceMergeObjects
                          - ForceMergeObjectsAppendArrays
                          - MergeObject
                          - AppendArray
                          type: string
                      type: object
                    toFieldPath:
                      description: |-
                        ToFieldPath is the path of the field on the resource whose value will
                        be changed with the result of transforms. Leave empty if you'd like to
                        propagate to the same path as fromFieldPath.
                      type: string
                    transforms:
                      description: |-
                        Transforms are the list of functions that are used as a FIFO pipe for the
                        input to be transformed.
                      items:
                        description: |-
                          Transform is a unit of process whose input is transformed into an output with
                          the supplied configuration.
                        properties:
                          convert:
                            description: Convert is used to cast the input into the
                              given output type.
                            properties:
                              format:
                                description: |-
                                  The expected input format.


                                  * `quantity` - parses the input as a K8s [`resource.Quantity`](https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity).
                                  Only used during `string -> float64` conversions.
                                  * `json` - parses the input as a JSON string.
                                  Only used during `string -> object` or `string -> list` conversions.


                                  If this property is null, the default conversion is applied.
                                enum:
                                - none
                                - quantity
                                - json
                                type: string
                              toType:
                                description: ToType is the type of the output of this
                                  transform.
                                enum:
                                - string
                                - int
                                - int64
                                - bool
                                - float64
                                - object
                                - array
                                type: string
                            required:
                            - toType
                            type: object
                          map:
                            additionalProperties:
                              x-kubernetes-preserve-unknown-fields: true
                            description: Map uses the input as a key in the given
                              map and returns the value.
                            type: object
                          match:
                            description: Match is a more complex version of Map that
                              matches a list of patterns.
                            properties:
                              fallbackTo:
                                default: Value
                                description: Determines to what value the transform
                                  should fallback if no pattern matches.
                                enum:
                                - Value
                                - Input
                                type: string
                              fallbackValue:
                                description: |-
                                  The fallback value that should be returned by the transform if now pattern
                                  matches.
                                x-kubernetes-preserve-unknown-fields: true
                              patterns:
                                description: |-
                                  The patterns that should be tested against the input string.
                                  Patterns are tested in order. The value of the first match is used as
                                  result of this transform.
                                items:
                                  description: |-
                                    MatchTransformPattern is a transform that returns the value that matches a
                                    pattern.
                                  properties:
                                    literal:
                                      description: |-
                                        Literal exactly matches the input string (case sensitive).
                                        Is required if `type` is `literal`.
                                      type: string
                                    regexp:
                                      description: |-
                                        Regexp to match against the input string.
                                        Is required if `type` is `regexp`.
                                      type: string
                                    result:
                                      description: The value that is used as result
                                        of the transform if the pattern matches.
                                      x-kubernetes-preserve-unknown-fields: true
                                    type:
                                      default: literal
                                      description: |-
                                        Type specifies how the pattern matches the input.


                                        * `literal` - the pattern value has to exactly match (case sensitive) the
                                        input string. This is the default.


                                        * `regexp` - the pattern treated as a regular expression against
                                        which the input string is tested. Crossplane will throw an error if the
                                        key is not a valid regexp.
                                      enum:
                                      - literal
                                      - regexp
                                      type: string
                                  required:
                                  - result
                                  - type
                                  type: object
                                type: array
                            type: object
                          math:
                            description: |-
                              Math is used to transform the input via mathematical operations such as
                              multiplication.
                            properties:
                              clampMax:
                                description: ClampMax makes sure that the value is
                                  not bigger than the given value.
                                format: int64
                                type: integer
                              clampMin:
                                description: ClampMin makes sure that the value is
                                  not smaller than the given value.
                                format: int64
                                type: integer
                              multiply:
                                description: Multiply the value.
                                format: int64
                                type: integer
                              type:
                                default: Multiply
                                description: Type of the math transform to be run.
                                enum:
                                - Multiply
                                - ClampMin
                                - ClampMax
                                type: string
                            type: object
                          string:
                            description: |-
                              String is used to transform the input into a string or a different kind
                              of string. Note that the input does not necessarily need to be a string.
                            properties:
                              convert:
                                description: |-
                                  Optional conversion method to be specified.
                                  `ToUpper` and `ToLower` change the letter case of the input string.
                                  `ToBase64` and `FromBase64` perform a base64 conversion based on the input string.
                                  `ToJson` converts any input value into its raw JSON representation.
                                  `ToSha1`, `ToSha256` and `ToSha512` generate a hash value based on the input
                                  converted to JSON.
                                enum:
                                - ToUpper
                                - ToLower
                                - ToBase64
                                - FromBase64
                                - ToJson
                                - ToSha1
                                - ToSha256
                                - ToSha512
                                type: string
                              fmt:
                                description: |-
                                  Format the input using a Go format string. See
                                  https://golang.org/pkg/fmt/ for details.
                                type: string
                              join:
                                description: Join the input strings.
                                properties:
                                  separator:
                                    description: Separator to join the input strings.
                                    type: string
                                required:
                                - separator
                                type: object
                              regexp:
                                description: Extract a match from the input using
                                  a regular expression.
                                properties:
                                  group:
                                    description: Group number to match. 0 (the default)
                                      matches the entire expression.
                                    type: integer
                                  match:
                                    description: |-
                                      Match string. May optionally include submatches, aka capture groups.
                                      See https://pkg.go.dev/regexp/ for details.
                                    type: string
                                required:
                                - match
                                type: object
                              replace:
                                description: Search/Replace applied to the input string.
                                properties:
                                  replace:
                                    description: The Replace string replaces all occurrences
                                      of the search string.
                                    type: string
                                  search:
                                    description: The Search string to match.
                                    type: string
                                required:
                                - replace
                                - search
                                type: object
                              trim:
                                description: Trim the prefix or suffix from the input
                                type: string
                              type:
                                default: Format
                                description: Type of the string transform to be run.
                                enum:
                                - Format
                                - Convert
                                - TrimPrefix
                                - TrimSuffix
                                - Regexp
                                type: string
                            required:
                            - type
                            type: object
                          type:
                            description: Type of the transform to be run.
                            enum:
                            - map
                            - match
                            - math
                            - string
                            - convert
                            type: string
                        required:
                        - type
                        type: object
                      type: array
                    type:
                      default: FromCompositeFieldPath
                      description: |-
                        Type sets the patching behaviour to be used. Each patch type may require
                        its own fields to be set on the Patch object.
                      enum:
                      - FromCompositeFieldPath
                      - CombineFromComposite
                      type: string
                  type: object
                type: array
              policy:
                description: |-
                  Policy represents the Resolution policy which apply to all
                  EnvironmentSourceReferences in EnvironmentConfigs list.
                properties:
                  resolution:
                    default: Required
                    description: |-
                      Resolution specifies whether resolution of this reference is required.
                      The default is 'Required', which means the reconcile will fail if the
                      reference cannot be resolved. 'Optional' means this reference will be
                      a no-op if it cannot be resolved.
                    enum:
                    - Required
                    - Optional
                    type: string
                type: object
            type: object
        type: object
    served: true
    storage: true
